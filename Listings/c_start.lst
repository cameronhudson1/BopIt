


ARM Macro Assembler    Page 1 Program Title for Listing Header Goes Here


    1 00000000                 TTL              Program Title for Listing Heade
r Goes Here
    2 00000000         ;*******************************************************
                       *********
    3 00000000         ;Descriptive comment header goes here.
    4 00000000         ;(What does the program do?)
    5 00000000         ;Name:  <Your name here>
    6 00000000         ;Date:  <Date completed here>
    7 00000000         ;Class:  CMPE-250
    8 00000000         ;Section:  <Your lab section, day, and time here>
    9 00000000         ;-------------------------------------------------------
                       --------
   10 00000000         ;Keil Template for KL46 Assembly with Keil C startup
   11 00000000         ;R. W. Melton
   12 00000000         ;November 13, 2017
   13 00000000         ;*******************************************************
                       *********
   14 00000000         ;Assembler directives
   15 00000000                 THUMB
   16 00000000                 GBLL             MIXED_ASM_C
   17 00000000 TRUE     
                       MIXED_ASM_C
                               SETL             {TRUE}
   19 00000000         ;*******************************************************
                       *********
   20 00000000         ;Include files
   21 00000000                 GET              MKL46Z4.s   ;Included by start.
                                                            s
   23 00000000         ;*******************************************************
                       *********
   24 00000000         ;EQUates
   25 00000000         ;-------------------------------------------------------
                       --------
   26 00000000         ;NVIC_ICER
   27 00000000         ;31-00:CLRENA=masks for HW IRQ sources;
   28 00000000         ;             read:   0 = unmasked;   1 = masked
   29 00000000         ;             write:  0 = no effect;  1 = mask
   30 00000000         ;22:PIT IRQ mask
   31 00000000         ;12:UART0 IRQ mask
   32 00000000 00400000 
                       NVIC_ICER_PIT_MASK
                               EQU              PIT_IRQ_MASK
   33 00000000 00001000 
                       NVIC_ICER_UART0_MASK
                               EQU              UART0_IRQ_MASK
   34 00000000         ;-------------------------------------------------------
                       --------
   35 00000000         ;NVIC_ICPR
   36 00000000         ;31-00:CLRPEND=pending status for HW IRQ sources;
   37 00000000         ;             read:   0 = not pending;  1 = pending
   38 00000000         ;             write:  0 = no effect;
   39 00000000         ;                     1 = change status to not pending
   40 00000000         ;22:PIT IRQ pending status
   41 00000000         ;12:UART0 IRQ pending status
   42 00000000 00400000 
                       NVIC_ICPR_PIT_MASK
                               EQU              PIT_IRQ_MASK
   43 00000000 00001000 
                       NVIC_ICPR_UART0_MASK



ARM Macro Assembler    Page 2 Program Title for Listing Header Goes Here


                               EQU              UART0_IRQ_MASK
   44 00000000         ;-------------------------------------------------------
                       --------
   45 00000000         ;NVIC_IPR0-NVIC_IPR7
   46 00000000         ;2-bit priority:  00 = highest; 11 = lowest
   47 00000000         ;--PIT
   48 00000000 00000000 
                       PIT_IRQ_PRIORITY
                               EQU              0
   49 00000000 00C00000 
                       NVIC_IPR_PIT_MASK
                               EQU              (3 << PIT_PRI_POS)
   50 00000000 00000000 
                       NVIC_IPR_PIT_PRI_0
                               EQU              (PIT_IRQ_PRIORITY << UART0_PRI_
POS)
   51 00000000         ;--UART0
   52 00000000 00000003 
                       UART0_IRQ_PRIORITY
                               EQU              3
   53 00000000 000000C0 
                       NVIC_IPR_UART0_MASK
                               EQU              (3 << UART0_PRI_POS)
   54 00000000 000000C0 
                       NVIC_IPR_UART0_PRI_3
                               EQU              (UART0_IRQ_PRIORITY << UART0_PR
I_POS)
   55 00000000         ;-------------------------------------------------------
                       --------
   56 00000000         ;NVIC_ISER
   57 00000000         ;31-00:SETENA=masks for HW IRQ sources;
   58 00000000         ;             read:   0 = masked;     1 = unmasked
   59 00000000         ;             write:  0 = no effect;  1 = unmask
   60 00000000         ;22:PIT IRQ mask
   61 00000000         ;12:UART0 IRQ mask
   62 00000000 00400000 
                       NVIC_ISER_PIT_MASK
                               EQU              PIT_IRQ_MASK
   63 00000000 00001000 
                       NVIC_ISER_UART0_MASK
                               EQU              UART0_IRQ_MASK
   64 00000000         ;-------------------------------------------------------
                       --------
   65 00000000         ;PIT_LDVALn:  PIT load value register n
   66 00000000         ;31-00:TSV=timer start value (period in clock cycles - 1
                       )
   67 00000000         ;Clock ticks for 0.01 s at 24 MHz count rate
   68 00000000         ;0.01 s * 24,000,000 Hz = 240,000
   69 00000000         ;TSV = 240,000 - 1
   70 00000000 0003A97F 
                       PIT_LDVAL_10ms
                               EQU              239999
   71 00000000         ;-------------------------------------------------------
                       --------
   72 00000000         ;PIT_MCR:  PIT module control register
   73 00000000         ;1-->    0:FRZ=freeze (continue'/stop in debug mode)
   74 00000000         ;0-->    1:MDIS=module disable (PIT section)
   75 00000000         ;               RTI timer not affected
   76 00000000         ;               must be enabled before any other PIT set



ARM Macro Assembler    Page 3 Program Title for Listing Header Goes Here


                       up
   77 00000000 00000001 
                       PIT_MCR_EN_FRZ
                               EQU              PIT_MCR_FRZ_MASK
   78 00000000         ;-------------------------------------------------------
                       --------
   79 00000000         ;PIT_TCTRLn:  PIT timer control register n
   80 00000000         ;0-->   2:CHN=chain mode (enable)
   81 00000000         ;1-->   1:TIE=timer interrupt enable
   82 00000000         ;1-->   0:TEN=timer enable
   83 00000000 00000003 
                       PIT_TCTRL_CH_IE
                               EQU              (PIT_TCTRL_TEN_MASK :OR: PIT_TC
TRL_TIE_MASK)
   84 00000000         ;-------------------------------------------------------
                       --------
   85 00000000         ;UART0_S2
   86 00000000         ;1-->7:LBKDIF=LIN break detect interrupt flag (clear)
   87 00000000         ;             write 1 to clear
   88 00000000         ;1-->6:RXEDGIF=RxD pin active edge interrupt flag (clear
                       )
   89 00000000         ;              write 1 to clear
   90 00000000         ;0-->5:(reserved); read-only; always 0
   91 00000000         ;0-->4:RXINV=receive data inversion (disabled)
   92 00000000         ;0-->3:RWUID=receive wake-up idle detect
   93 00000000         ;0-->2:BR213=break character generation length (10)
   94 00000000         ;0-->1:LBKDE=LIN break detect enable (disabled)
   95 00000000         ;0-->0:RAF=receiver active flag; read-only
   96 00000000 000000C0 
                       UART0_S2_NO_RXINV_BR210_NO_LBKDETECT_CLEAR_FLAGS
                               EQU              0xC0
   97 00000000         ;-------------------------------------------------------
                       --------
   98 00000000         ;PORTx_PCRn (Port x pin control register n [for pin n])
   99 00000000         ;___->10-08:Pin mux control (select 0 to 8)
  100 00000000         ;Use provided PORT_PCR_MUX_SELECT_2_MASK
  101 00000000         ;-------------------------------------------------------
                       --------
  102 00000000         ;Port A
  104 00000000 01000200 
                       PORT_PCR_SET_PTA1_UART0_RX
                               EQU              (PORT_PCR_ISF_MASK :OR:       
                             PORT_PCR_MUX_SELECT_2_MASK)
  106 00000000 01000200 
                       PORT_PCR_SET_PTA2_UART0_TX
                               EQU              (PORT_PCR_ISF_MASK :OR:       
                             PORT_PCR_MUX_SELECT_2_MASK)
  107 00000000         ;-------------------------------------------------------
                       --------
  108 00000000         ;SIM_SCGC4
  109 00000000         ;1->10:UART0 clock gate control (enabled)
  110 00000000         ;Use provided SIM_SCGC4_UART0_MASK
  111 00000000         ;-------------------------------------------------------
                       --------
  112 00000000         ;SIM_SCGC5
  113 00000000         ;1->09:Port A clock gate control (enabled)
  114 00000000         ;Use provided SIM_SCGC5_PORTA_MASK
  115 00000000         ;-------------------------------------------------------
                       --------



ARM Macro Assembler    Page 4 Program Title for Listing Header Goes Here


  116 00000000         ;SIM_SOPT2
  117 00000000         ;01=27-26:UART0SRC=UART0 clock source select
  118 00000000         ;         (PLLFLLSEL determines MCGFLLCLK' or MCGPLLCLK/
                       2)
  119 00000000         ; 1=   16:PLLFLLSEL=PLL/FLL clock select (MCGPLLCLK/2)
  121 00000000 04000000 
                       SIM_SOPT2_UART0SRC_MCGPLLCLK
                               EQU              (1 << SIM_SOPT2_UART0SRC_SHIFT)
  123 00000000 04010000 
                       SIM_SOPT2_UART0_MCGPLLCLK_DIV2
                               EQU              (SIM_SOPT2_UART0SRC_MCGPLLCLK :
OR: SIM_SOPT2_PLLFLLSEL_MASK)
  124 00000000         ;-------------------------------------------------------
                       --------
  125 00000000         ;SIM_SOPT5
  126 00000000         ; 0->   16:UART0 open drain enable (disabled)
  127 00000000         ; 0->   02:UART0 receive data select (UART0_RX)
  128 00000000         ;00->01-00:UART0 transmit data select source (UART0_TX)
  132 00000000 00010007 
                       SIM_SOPT5_UART0_EXTERN_MASK_CLEAR
                               EQU              (SIM_SOPT5_UART0ODE_MASK :OR:  
                                SIM_SOPT5_UART0RXSRC_MASK :OR:               
                   SIM_SOPT5_UART0TXSRC_MASK)
  133 00000000         ;-------------------------------------------------------
                       --------
  134 00000000         ;UART0_BDH
  135 00000000         ;    0->  7:LIN break detect IE (disabled)
  136 00000000         ;    0->  6:RxD input active edge IE (disabled)
  137 00000000         ;    0->  5:Stop bit number select (1)
  138 00000000         ;00001->4-0:SBR[12:0] (UART0CLK / [9600 * (OSR + 1)]) 
  139 00000000         ;UART0CLK is MCGPLLCLK/2
  140 00000000         ;MCGPLLCLK is 96 MHz
  141 00000000         ;MCGPLLCLK/2 is 48 MHz
  142 00000000         ;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
  143 00000000 00000001 
                       UART0_BDH_9600
                               EQU              0x01
  144 00000000         ;-------------------------------------------------------
                       --------
  145 00000000         ;UART0_BDL
  146 00000000         ;26->7-0:SBR[7:0] (UART0CLK / [9600 * (OSR + 1)])
  147 00000000         ;UART0CLK is MCGPLLCLK/2
  148 00000000         ;MCGPLLCLK is 96 MHz
  149 00000000         ;MCGPLLCLK/2 is 48 MHz
  150 00000000         ;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
  151 00000000 00000038 
                       UART0_BDL_9600
                               EQU              0x38
  152 00000000         ;-------------------------------------------------------
                       --------
  153 00000000         ;UART0_C1
  154 00000000         ;0-->7:LOOPS=loops select (normal)
  155 00000000         ;0-->6:DOZEEN=doze enable (disabled)
  156 00000000         ;0-->5:RSRC=receiver source select (internal--no effect 
                       LOOPS=0)
  157 00000000         ;0-->4:M=9- or 8-bit mode select 
  158 00000000         ;        (1 start, 8 data [lsb first], 1 stop)
  159 00000000         ;0-->3:WAKE=receiver wakeup method select (idle)
  160 00000000         ;0-->2:IDLE=idle line type select (idle begins after sta



ARM Macro Assembler    Page 5 Program Title for Listing Header Goes Here


                       rt bit)
  161 00000000         ;0-->1:PE=parity enable (disabled)
  162 00000000         ;0-->0:PT=parity type (even parity--no effect PE=0)
  163 00000000 00000000 
                       UART0_C1_8N1
                               EQU              0x00
  164 00000000         ;-------------------------------------------------------
                       --------
  165 00000000         ;UART0_C2
  166 00000000         ;0-->7:TIE=transmit IE for TDRE (disabled)
  167 00000000         ;0-->6:TCIE=transmission complete IE for TC (disabled)
  168 00000000         ;0-->5:RIE=receiver IE for RDRF (disabled)
  169 00000000         ;0-->4:ILIE=idle line IE for IDLE (disabled)
  170 00000000         ;1-->3:TE=transmitter enable (enabled)
  171 00000000         ;1-->2:RE=receiver enable (enabled)
  172 00000000         ;0-->1:RWU=receiver wakeup control (normal)
  173 00000000         ;0-->0:SBK=send break (disabled, normal)
  174 00000000 0000000C 
                       UART0_C2_T_R
                               EQU              (UART0_C2_TE_MASK :OR: UART0_C2
_RE_MASK)
  175 00000000 0000002C 
                       UART0_C2_T_RI
                               EQU              (UART0_C2_RIE_MASK :OR: UART0_C
2_T_R)
  176 00000000 000000AC 
                       UART0_C2_TI_RI
                               EQU              (UART0_C2_TIE_MASK :OR: UART0_C
2_T_RI)
  177 00000000         ;-------------------------------------------------------
                       --------
  178 00000000         ;UART0_C3
  179 00000000         ;0-->7:R8T9=9th data bit for receiver (not used M=0)
  180 00000000         ;           10th data bit for transmitter (not used M10=
                       0)
  181 00000000         ;0-->6:R9T8=9th data bit for transmitter (not used M=0)
  182 00000000         ;           10th data bit for receiver (not used M10=0)
  183 00000000         ;0-->5:TXDIR=UART_TX pin direction in single-wire mode
  184 00000000         ;            (no effect LOOPS=0)
  185 00000000         ;0-->4:TXINV=transmit data inversion (not inverted)
  186 00000000         ;0-->3:ORIE=overrun IE for OR (disabled)
  187 00000000         ;0-->2:NEIE=noise error IE for NF (disabled)
  188 00000000         ;0-->1:FEIE=framing error IE for FE (disabled)
  189 00000000         ;0-->0:PEIE=parity error IE for PF (disabled)
  190 00000000 00000000 
                       UART0_C3_NO_TXINV
                               EQU              0x00
  191 00000000         ;-------------------------------------------------------
                       --------
  192 00000000         ;UART0_C4
  193 00000000         ;    0-->  7:MAEN1=match address mode enable 1 (disabled
                       )
  194 00000000         ;    0-->  6:MAEN2=match address mode enable 2 (disabled
                       )
  195 00000000         ;    0-->  5:M10=10-bit mode select (not selected)
  196 00000000         ;01111-->4-0:OSR=over sampling ratio (16)
  197 00000000         ;               = 1 + OSR for 3 <= OSR <= 31
  198 00000000         ;               = 16 for 0 <= OSR <= 2 (invalid values)
  199 00000000 0000000F 



ARM Macro Assembler    Page 6 Program Title for Listing Header Goes Here


                       UART0_C4_OSR_16
                               EQU              0x0F
  200 00000000 0000000F 
                       UART0_C4_NO_MATCH_OSR_16
                               EQU              UART0_C4_OSR_16
  201 00000000         ;-------------------------------------------------------
                       --------
  202 00000000         ;UART0_C5
  203 00000000         ;  0-->  7:TDMAE=transmitter DMA enable (disabled)
  204 00000000         ;  0-->  6:Reserved; read-only; always 0
  205 00000000         ;  0-->  5:RDMAE=receiver full DMA enable (disabled)
  206 00000000         ;000-->4-2:Reserved; read-only; always 0
  207 00000000         ;  0-->  1:BOTHEDGE=both edge sampling (rising edge only
                       )
  208 00000000         ;  0-->  0:RESYNCDIS=resynchronization disable (enabled)
                       
  209 00000000 00000000 
                       UART0_C5_NO_DMA_SSR_SYNC
                               EQU              0x00
  210 00000000         ;-------------------------------------------------------
                       --------
  211 00000000         ;UART0_S1
  212 00000000         ;0-->7:TDRE=transmit data register empty flag; read-only
                       
  213 00000000         ;0-->6:TC=transmission complete flag; read-only
  214 00000000         ;0-->5:RDRF=receive data register full flag; read-only
  215 00000000         ;1-->4:IDLE=idle line flag; write 1 to clear (clear)
  216 00000000         ;1-->3:OR=receiver overrun flag; write 1 to clear (clear
                       )
  217 00000000         ;1-->2:NF=noise flag; write 1 to clear (clear)
  218 00000000         ;1-->1:FE=framing error flag; write 1 to clear (clear)
  219 00000000         ;1-->0:PF=parity error flag; write 1 to clear (clear)
  220 00000000 0000001F 
                       UART0_S1_CLEAR_FLAGS
                               EQU              0x1F
  221 00000000         ;-------------------------------------------------------
                       --------
  222 00000000         ;UART0_S2
  223 00000000         ;1-->7:LBKDIF=LIN break detect interrupt flag (clear)
  224 00000000         ;             write 1 to clear
  225 00000000         ;1-->6:RXEDGIF=RxD pin active edge interrupt flag (clear
                       )
  226 00000000         ;              write 1 to clear
  227 00000000         ;0-->5:(reserved); read-only; always 0
  228 00000000         ;0-->4:RXINV=receive data inversion (disabled)
  229 00000000         ;0-->3:RWUID=receive wake-up idle detect
  230 00000000         ;0-->2:BRK13=break character generation length (10)
  231 00000000         ;0-->1:LBKDE=LIN break detect enable (disabled)
  232 00000000         ;0-->0:RAF=receiver active flag; read-only
  233 00000000 000000C0 
                       UART0_S2_NO_RXINV_BRK10_NO_LBKDETECT_CLEAR_FLAGS
                               EQU              0xC0
  234 00000000         ;-------------------------------------------------------
                       -------
  235 00000000         
  236 00000000 0000004F 
                       MAX_STRING
                               EQU              79          ;max size of string
                                                             + null termination



ARM Macro Assembler    Page 7 Program Title for Listing Header Goes Here


                                                            
  237 00000000 00000000 
                       IN_PTR  EQU              0           ;pointer to where t
                                                            o enqueue
  238 00000000 00000004 
                       OUT_PTR EQU              4           ;pointer to where t
                                                            o dequeue
  239 00000000 00000008 
                       BUF_STRT
                               EQU              8           ;start of buffer
  240 00000000 0000000C 
                       BUF_PAST
                               EQU              12          ;first byte past bu
                                                            ffer
  241 00000000 00000010 
                       BUF_SIZE
                               EQU              16          ;size of buffer
  242 00000000 00000011 
                       NUM_ENQD
                               EQU              17          ;number of elements
                                                             enqueued
  243 00000000 00000004 
                       NIB_SHFT
                               EQU              4           ;bits to shift to g
                                                            et next nibble
  244 00000000 00000050 
                       TXRX_BUF_SIZE
                               EQU              80
  245 00000000 00000004 
                       BUFFER_SIZE
                               EQU              4
  246 00000000         ;*******************************************************
                       *********
  247 00000000         ;MACROs
  248 00000000         ;*******************************************************
                       *********
  249 00000000         ;Program
  250 00000000         ;C source will contain main ()
  251 00000000         ;Only subroutines and ISRs in this assembly source
  252 00000000                 AREA             MyCode,CODE,READONLY
  253 00000000                 EXPORT           GetChar
  254 00000000                 EXPORT           GetStringSB
  255 00000000                 EXPORT           Init_UART0_IRQ
  256 00000000                 EXPORT           PutChar
  257 00000000                 EXPORT           PutNumHex
  258 00000000                 EXPORT           PutNumUB
  259 00000000                 EXPORT           PutStringSB
  260 00000000                 EXPORT           UART0_IRQHandler
  261 00000000                 EXPORT           Init_PIT_IRQ
  262 00000000                 EXPORT           PIT_IRQHandler
  263 00000000         ;>>>>> begin subroutine code <<<<<
  264 00000000         
  265 00000000         ;-------------------------------------------------------
                       -----------------------  
  266 00000000         ;Init_UART0_IRQ
  267 00000000         ;FUNCTION: initializes UART0 through port A pins 1 and 2
                        with 8 bits data, no 
  268 00000000         ;parity, one stop bit at 9600 baud, and enables hardware
                        interrupts



ARM Macro Assembler    Page 8 Program Title for Listing Header Goes Here


  269 00000000         ;INPUTS: none
  270 00000000         ;OUTPUT: none
  271 00000000         ;CHANGED: none
  272 00000000         ;SUBROUTINES USED: InitQueue
  273 00000000         ;-------------------------------------------------------
                       -----------------------
  274 00000000         Init_UART0_IRQ
                               PROC             {R0-R14}
  275 00000000 B507            PUSH             {R0-R2,LR}
  276 00000002         
  277 00000002         ;initialize Rx and Tx queues
  278 00000002 48B2            LDR              R0,=RxQBuffer ;init Rx queue
  279 00000004 49B2            LDR              R1,=RxQRef
  280 00000006 2250            MOVS             R2,#TXRX_BUF_SIZE
  281 00000008 F7FF FFFE       BL               InitQueue
  282 0000000C 48B1            LDR              R0,=TxQBuffer ;init Tx queue
  283 0000000E 49B2            LDR              R1,=TxQRef
  284 00000010 F7FF FFFE       BL               InitQueue
  285 00000014         
  286 00000014 48B1            LDR              R0,=SIM_SOPT2
  287 00000016 49B2            LDR              R1,=SIM_SOPT2_UART0SRC_MASK
  288 00000018 6802            LDR              R2,[R0,#0]
  289 0000001A 438A            BICS             R2,R2,R1
  290 0000001C 49B1            LDR              R1,=SIM_SOPT2_UART0_MCGPLLCLK_D
IV2
  291 0000001E 430A            ORRS             R2,R2,R1
  292 00000020 6002            STR              R2,[R0,#0]
  293 00000022         
  294 00000022         ;Enable external connection for UART0     
  295 00000022 48B1            LDR              R0,=SIM_SOPT5
  296 00000024 49B1            LDR              R1,=SIM_SOPT5_UART0_EXTERN_MASK
_CLEAR
  297 00000026 6802            LDR              R2,[R0,#0]
  298 00000028 438A            BICS             R2,R2,R1
  299 0000002A 6002            STR              R2,[R0,#0]
  300 0000002C         
  301 0000002C         ;Enable clock for UART0 module     
  302 0000002C 48B0            LDR              R0,=SIM_SCGC4
  303 0000002E 49B1            LDR              R1,=SIM_SCGC4_UART0_MASK
  304 00000030 6802            LDR              R2,[R0,#0]
  305 00000032 430A            ORRS             R2,R2,R1
  306 00000034 6002            STR              R2,[R0,#0]
  307 00000036         
  308 00000036         ;Enable clock for Port A module     
  309 00000036 48B0            LDR              R0,=SIM_SCGC5
  310 00000038 49B0            LDR              R1,=SIM_SCGC5_PORTA_MASK
  311 0000003A 6802            LDR              R2,[R0,#0]
  312 0000003C 430A            ORRS             R2,R2,R1
  313 0000003E 6002            STR              R2,[R0,#0]
  314 00000040         
  315 00000040         ;Connect PORT A Pin 1 (PTA1) to UART0 Rx (J1 Pin 02)    
                        
  316 00000040 48AF            LDR              R0,=PORTA_PCR1
  317 00000042 49B0            LDR              R1,=PORT_PCR_SET_PTA1_UART0_RX
  318 00000044 6001            STR              R1,[R0,#0]
  319 00000046         
  320 00000046         ;Connect PORT A Pin 2 (PTA2) to UART0 Tx (J1 Pin 04)    
                        
  321 00000046 48B0            LDR              R0,=PORTA_PCR2



ARM Macro Assembler    Page 9 Program Title for Listing Header Goes Here


  322 00000048 49AE            LDR              R1,=PORT_PCR_SET_PTA2_UART0_TX
  323 0000004A 6001            STR              R1,[R0,#0]
  324 0000004C         
  325 0000004C         ;Disable UART0 receiver and transmitter     
  326 0000004C 48AF            LDR              R0,=UART0_BASE
  327 0000004E 210C            MOVS             R1,#UART0_C2_T_R
  328 00000050 78C2            LDRB             R2,[R0,#UART0_C2_OFFSET]
  329 00000052 438A            BICS             R2,R2,R1
  330 00000054 70C2            STRB             R2,[R0,#UART0_C2_OFFSET]
  331 00000056         
  332 00000056         ;initialize NVIC
  333 00000056 48AE            LDR              R0,=UART0_IPR
  334 00000058 4AAE            LDR              R2,=NVIC_IPR_UART0_PRI_3
  335 0000005A 6803            LDR              R3,[R0,#0]
  336 0000005C 4313            ORRS             R3,R3,R2
  337 0000005E 6003            STR              R3,[R0,#0]
  338 00000060         
  339 00000060         ;clear any pending uart interrupts
  340 00000060 48AD            LDR              R0,=NVIC_ICPR
  341 00000062 49AE            LDR              R1,=NVIC_ICPR_UART0_MASK
  342 00000064 6001            STR              R1,[R0,#0]
  343 00000066         
  344 00000066         ;unmask uart interrupts
  345 00000066 48AE            LDR              R0,=NVIC_ISER
  346 00000068 49AC            LDR              R1,=NVIC_ISER_UART0_MASK
  347 0000006A 6001            STR              R1,[R0,#0]
  348 0000006C         
  349 0000006C         ;Set UART0 for 9600 baud, 8N1 protocol 
  350 0000006C 48A7            LDR              R0,=UART0_BASE
  351 0000006E 2101            MOVS             R1,#UART0_BDH_9600
  352 00000070 7001            STRB             R1,[R0,#UART0_BDH_OFFSET]
  353 00000072 2138            MOVS             R1,#UART0_BDL_9600
  354 00000074 7041            STRB             R1,[R0,#UART0_BDL_OFFSET]
  355 00000076 2100            MOVS             R1,#UART0_C1_8N1
  356 00000078 7081            STRB             R1,[R0,#UART0_C1_OFFSET]
  357 0000007A 2100            MOVS             R1,#UART0_C3_NO_TXINV
  358 0000007C 7181            STRB             R1,[R0,#UART0_C3_OFFSET]
  359 0000007E 210F            MOVS             R1,#UART0_C4_NO_MATCH_OSR_16
  360 00000080 7281            STRB             R1,[R0,#UART0_C4_OFFSET]
  361 00000082 2100            MOVS             R1,#UART0_C5_NO_DMA_SSR_SYNC
  362 00000084 72C1            STRB             R1,[R0,#UART0_C5_OFFSET]
  363 00000086 211F            MOVS             R1,#UART0_S1_CLEAR_FLAGS
  364 00000088 7101            STRB             R1,[R0,#UART0_S1_OFFSET]
  365 0000008A 21C0            MOVS             R1,#UART0_S2_NO_RXINV_BR210_NO_
LBKDETECT_CLEAR_FLAGS
  366 0000008C 7141            STRB             R1,[R0,#UART0_S2_OFFSET]
  367 0000008E         
  368 0000008E         ;Enable UART0 receiver and transmitter     
  369 0000008E 212C            MOVS             R1,#UART0_C2_T_RI
  370 00000090 70C1            STRB             R1,[R0,#UART0_C2_OFFSET]
  371 00000092         
  372 00000092 BD07            POP              {R0-R2,PC}
  373 00000094 4770            BX               LR
  374 00000096                 ENDP
  375 00000096         ;-------------------------------------------------------
                       -----------------------
  376 00000096         
  377 00000096         ;-------------------------------------------------------
                       -----------------------  



ARM Macro Assembler    Page 10 Program Title for Listing Header Goes Here


  378 00000096         ;GetChar
  379 00000096         ;FUNCTION: Reads a single character from the terminal to
                        R0
  380 00000096         ;INPUTS: none
  381 00000096         ;OUTPUTS: R0 - character
  382 00000096         ;CHANGED: R0
  383 00000096         ;SUBROUTINES USED: Dequeue
  384 00000096         ;-------------------------------------------------------
                       -----------------------
  385 00000096         
  386 00000096         ;Poll RDRF until UART0 ready to receive  
  387 00000096         GetChar PROC             {R1-R14}
  388 00000096 B502            PUSH             {R1,LR}
  389 00000098         
  390 00000098 498D            LDR              R1,=RxQRef  ;try to enqueue cha
                                                            racter
  391 0000009A         
  392 0000009A B672    getLoop CPSID            I           ;mask interrupts
  393 0000009C F7FF FFFE       BL               Dequeue
  394 000000A0 B662            CPSIE            I           ;unmask interrupts
  395 000000A2 D2FA            BCS              getLoop     ;loop if unsuccesfu
                                                            l
  396 000000A4         
  397 000000A4 BD02            POP              {R1,PC}
  398 000000A6 4770            BX               LR
  399 000000A8                 ENDP
  400 000000A8         ;-----------------------------end subroutine------------
                       -----------------------
  401 000000A8         
  402 000000A8         ;-------------------------------------------------------
                       -----------------------  
  403 000000A8         ;GetStringSB
  404 000000A8         ;FUNCTION: reads a string from the terminal keyboard, di
                       splays it to the 
  405 000000A8         ;     terminal screen, and stores the string in memory a
                       t an address
  406 000000A8         ;     specified in R0.
  407 000000A8         ;INPUTS: R0 - address to store string at; R1 - buffer ca
                       pacity
  408 000000A8         ;OUTPUTS: none
  409 000000A8         ;CHANGED: none
  410 000000A8         ;-------------------------------------------------------
                       -----------------------
  411 000000A8         ;R0: current character
  412 000000A8         ;R1: buffer capacity
  413 000000A8         ;R2: string base address
  414 000000A8         ;R3: counter/offset
  415 000000A8         
  416 000000A8         GetStringSB
                               PROC             {R0-R14}
  417 000000A8 B50F            PUSH             {R0-R3,LR}
  418 000000AA 1E49            SUBS             R1,R1,#1    ;Subtract 1 from bu
                                                            ffer capacity to ac
                                                            count
  419 000000AC         ;for null termination
  420 000000AC 0002            MOVS             R2,R0       ;Move address to R2
                                                            
  421 000000AE 2300            MOVS             R3,#0       ;Initialize counter
                                                             to 0



ARM Macro Assembler    Page 11 Program Title for Listing Header Goes Here


  422 000000B0         
  423 000000B0 F7FF FFFE 
                       GSLoop  BL               GetChar     ;Get character from
                                                             keyboard
  424 000000B4 280D            CMP              R0,#0x0D    ;if(char == CR)
  425 000000B6 D00A            BEQ              return
  426 000000B8 281F            CMP              R0,#0x1F    ;if(char == special
                                                             char)
  427 000000BA D3F9            BLO              GSLoop
  428 000000BC 287F            CMP              R0,#0x7F
  429 000000BE D0F7            BEQ              GSLoop
  430 000000C0 428B            CMP              R3,R1       ;if(counter >= buff
                                                            er capacity)
  431 000000C2 D2F5            BHS              GSLoop
  432 000000C4 F7FF FFFE       BL               PutChar     ;Print character to
                                                             terminal screen
  433 000000C8 54D0            STRB             R0,[R2,R3]  ;Store character in
                                                             memory at appropri
                                                            ate offset
  434 000000CA 1C5B            ADDS             R3,R3,#1    ;Increment counter
  435 000000CC E7F0            B                GSLoop
  436 000000CE         
  437 000000CE 2000    return  MOVS             R0,#0       ;Move 0 (null) into
                                                             R0
  438 000000D0 54D0            STRB             R0,[R2,R3]  ;Store null at end 
                                                            of string
  439 000000D2 200D            MOVS             R0,#0x0D    ;Move CR into R0
  440 000000D4 F7FF FFFE       BL               PutChar     ;Print to terminal 
                                                            screen
  441 000000D8 200A            MOVS             R0,#0x0A    ;Move LF into R0
  442 000000DA F7FF FFFE       BL               PutChar     ;Print to terminal 
                                                            screen
  443 000000DE         
  444 000000DE BD0F            POP              {R0-R3,PC}
  445 000000E0                 ENDP
  446 000000E0         ;-----------------------------end subroutine------------
                       -----------------------
  447 000000E0         
  448 000000E0         ;-------------------------------------------------------
                       -----------------------  
  449 000000E0         ;UART0_ISR
  450 000000E0         ;FUNCTION: handles uart input and output triggered by ha
                       rdware interrupts
  451 000000E0         ;INPUTS: none
  452 000000E0         ;OUTPUTS: none
  453 000000E0         ;CHANGED: none
  454 000000E0         ;SUBROUTINES USED: Enqueue, Dequeue
  455 000000E0         ;-------------------------------------------------------
                       -----------------------
  456 000000E0         UART0_IRQHandler
  457 000000E0         UART0_ISR
                               PROC             {R0-R14}
  458 000000E0 B672            CPSID            I
  459 000000E2 B500            PUSH             {LR}
  460 000000E4         
  461 000000E4 4889            LDR              R0,=UART0_BASE
  462 000000E6 78C1            LDRB             R1,[R0,#UART0_C2_OFFSET]
  463 000000E8 2280            MOVS             R2,#UART0_C2_TIE_MASK
  464 000000EA 4211            TST              R1,R2       ;check if TxInterru



ARM Macro Assembler    Page 12 Program Title for Listing Header Goes Here


                                                            ptEnabled
  465 000000EC D00D            BEQ              Rx
  466 000000EE 7901            LDRB             R1,[R0,#UART0_S1_OFFSET]
  467 000000F0 2280            MOVS             R2,#UART0_S1_TDRE_MASK
  468 000000F2 4211            TST              R1,R2       ;check if TDRE is s
                                                            et
  469 000000F4 D009            BEQ              Rx
  470 000000F6 4978            LDR              R1,=TxQRef
  471 000000F8 F7FF FFFE       BL               Dequeue     ;dequeue from trans
                                                            mit queue
  472 000000FC D303            BCC              dqSucc      ;branch if queue wa
                                                            s successful
  473 000000FE 4883            LDR              R0,=UART0_BASE
  474 00000100 212C            MOVS             R1,#UART0_C2_T_RI ;diasble TxIn
                                                            terrupt
  475 00000102 70C1            STRB             R1,[R0,#UART0_C2_OFFSET]
  476 00000104 E001            B                Rx
  477 00000106         
  478 00000106 4981    dqSucc  LDR              R1,=UART0_BASE ;write to uart d
                                                            ata register
  479 00000108 71C8            STRB             R0,[R1,#UART0_D_OFFSET]
  480 0000010A         
  481 0000010A 4880    Rx      LDR              R0,=UART0_BASE ;check if RDRF i
                                                            s set
  482 0000010C 7901            LDRB             R1,[R0,#UART0_S1_OFFSET]
  483 0000010E 2220            MOVS             R2,#UART0_S1_RDRF_MASK
  484 00000110 4211            TST              R1,R2
  485 00000112 D003            BEQ              rxTxDone
  486 00000114 79C0            LDRB             R0,[R0,#UART0_D_OFFSET] ;read c
                                                            har from data regis
                                                            ter
  487 00000116 496E            LDR              R1,=RxQRef
  488 00000118 F7FF FFFE       BL               Enqueue     ;enqueue character 
                                                            to receive queue
  489 0000011C         
  490 0000011C BD00    rxTxDone
                               POP              {PC}
  491 0000011E B662            CPSIE            I           ;unmask interrupts
  492 00000120                 ENDP
  493 00000120         ;-----------------------------end ISR-------------------
                       -----------------------
  494 00000120         
  495 00000120         ;-------------------------------------------------------
                       -----------------------  
  496 00000120         ;InitQueue
  497 00000120         ;FUNCTION: initializes the queue
  498 00000120         ;INPUTS: R0 - address of beginning of queue buffer; R1 -
                        address of beginning 
  499 00000120         ;of queue record; R2 - size of queue buffer
  500 00000120         ;OUTPUTS: none
  501 00000120         ;CHANGED: none
  502 00000120         ;-------------------------------------------------------
                       -----------------------
  503 00000120         InitQueue
                               PROC             {R0-R14}
  504 00000120 B401            PUSH             {R0}
  505 00000122         
  506 00000122 6008            STR              R0,[R1,#IN_PTR] ;define the hea
                                                            d of the queue



ARM Macro Assembler    Page 13 Program Title for Listing Header Goes Here


  507 00000124 6048            STR              R0,[R1,#OUT_PTR] ;define the ta
                                                            il of the queue
  508 00000126 6088            STR              R0,[R1,#BUF_STRT] ;define the s
                                                            tart of the buffer
  509 00000128 1880            ADDS             R0,R0,R2    ;R0 = buffer start 
                                                            + buffer size
  510 0000012A 60C8            STR              R0,[R1,#BUF_PAST] ;define the f
                                                            irst byte past the 
                                                            buffer
  511 0000012C 740A            STRB             R2,[R1,#BUF_SIZE] ;set the buff
                                                            er size
  512 0000012E 2000            MOVS             R0,#0       ;R0 = 0
  513 00000130 7448            STRB             R0,[R1,#NUM_ENQD] ;initialize t
                                                            he number enqueued 
                                                            to 0
  514 00000132         
  515 00000132 BC01            POP              {R0}
  516 00000134 4770            BX               LR
  517 00000136                 ENDP
  518 00000136         ;-----------------------------end subroutine------------
                       -----------------------
  519 00000136         
  520 00000136         ;-------------------------------------------------------
                       -----------------------  
  521 00000136         ;Dequeue
  522 00000136         ;FUNCTION: dequeues and returns the next element stored 
                       in the queue. C flag 
  523 00000136         ;if cannot dequeue
  524 00000136         ;INPUTS: R1 - address of beginning of queue record
  525 00000136         ;OUTPUTS: R0 - dequeued element; PSR C flag, success (0)
                        or failure (1)
  526 00000136         ;CHANGED: R0, APSR
  527 00000136         ;SUBROUTINES USED: none
  528 00000136         ;-------------------------------------------------------
                       -----------------------
  529 00000136         Dequeue PROC             {R1-R14}
  530 00000136 B40C            PUSH             {R2-R3}
  531 00000138         
  532 00000138 7C4A            LDRB             R2,[R1,#NUM_ENQD] ;load R2 with
                                                             number enqueued
  533 0000013A 2A00            CMP              R2, #0      ;check if current n
                                                            umber enqueued is 0
                                                            
  534 0000013C D012            BEQ              emptyDQ
  535 0000013E 6848            LDR              R0,[R1,#OUT_PTR]
  536 00000140 7800            LDRB             R0,[R0,#0]  ;get next element t
                                                            o be dequeued
  537 00000142 1E52            SUBS             R2,R2,#1    ;decrement number e
                                                            nqueued
  538 00000144 744A            STRB             R2,[R1,#NUM_ENQD] ;store new nu
                                                            mber enqueued
  539 00000146 684A            LDR              R2,[R1,#OUT_PTR] ;load R2 with 
                                                            out pointer
  540 00000148 1C52            ADDS             R2,R2,#1    ;increment out poin
                                                            ter by one byte
  541 0000014A 68CB            LDR              R3,[R1,#BUF_PAST] ;load R3 with
                                                             past buffer pointe
                                                            r
  542 0000014C 429A            CMP              R2,R3       ;check if out point



ARM Macro Assembler    Page 14 Program Title for Listing Header Goes Here


                                                            er is past buffer
  543 0000014E D300            BLO              clearCDQ
  544 00000150 688A            LDR              R2,[R1,#BUF_STRT] ;load new out
                                                             pointer as start o
                                                            f buffer
  545 00000152         
  546 00000152 604A    clearCDQ
                               STR              R2,[R1,#OUT_PTR] ;store new out
                                                             pointer
  547 00000154 2220            MOVS             R2,#0x20    ;load R2 with mask 
                                                            to clear C flag
  548 00000156 0612            LSLS             R2,R2,#24   ;shift mask 24 bits
                                                             left
  549 00000158 F3EF 8300       MRS              R3,APSR     ;load APSR into R3
  550 0000015C 4393            BICS             R3,R3,R2    ;clear using mask
  551 0000015E F383 8800       MSR              APSR,R3     ;store R3 in APSR
  552 00000162 E006            B                endDQ
  553 00000164         
  554 00000164 2220    emptyDQ MOVS             R2,#0x20    ;load R2 with mask 
                                                            to set C flag
  555 00000166 0612            LSLS             R2,R2,#24   ;shift mask 24 bits
                                                             left
  556 00000168 F3EF 8300       MRS              R3,APSR     ;load APSR into R3
  557 0000016C 4313            ORRS             R3,R3,R2    ;set using mask
  558 0000016E F383 8800       MSR              APSR,R3     ;store R3 in APSR
  559 00000172         
  560 00000172 BC0C    endDQ   POP              {R2-R3}
  561 00000174 4770            BX               LR
  562 00000176                 ENDP
  563 00000176         ;-----------------------------end subroutine------------
                       -----------------------
  564 00000176         ;-------------------------------------------------------
                       -----------------------  
  565 00000176         ;Enqueue
  566 00000176         ;FUNCTION: prompts the user for a character and enqueues
                        it. C flag set if 
  567 00000176         ;cannot enqueue
  568 00000176         ;INPUTS: R0 - element to enqueue; R1 - address of beginn
                       ing of queue record
  569 00000176         ;OUTPUTS: PSR C flag, success (0) or failure (1)
  570 00000176         ;CHANGED: APSR
  571 00000176         ;-------------------------------------------------------
                       -----------------------
  572 00000176         Enqueue PROC             {R0-R14}
  573 00000176 B50C            PUSH             {R2-R3,LR}
  574 00000178         
  575 00000178 7C4A            LDRB             R2,[R1,#NUM_ENQD] ;load R2 with
                                                             number enqueued
  576 0000017A 7C0B            LDRB             R3,[R1,#BUF_SIZE] ;load R3 with
                                                             buffer size
  577 0000017C 429A            CMP              R2,R3       ;check if R2 is gre
                                                            ater than R3
  578 0000017E D212            BHS              fullNQ
  579 00000180         
  580 00000180 680B            LDR              R3,[R1,#IN_PTR]
  581 00000182 7018            STRB             R0,[R3,#0]  ;enqueue element at
                                                             in pointer
  582 00000184 1C52            ADDS             R2,R2,#1    ;increment number e
                                                            nqueued



ARM Macro Assembler    Page 15 Program Title for Listing Header Goes Here


  583 00000186 744A            STRB             R2,[R1,#NUM_ENQD] ;store new nu
                                                            mber enqueued
  584 00000188 6808            LDR              R0,[R1,#IN_PTR] ;load R0 with i
                                                            n pointer
  585 0000018A 1C40            ADDS             R0,R0,#1    ;increment in point
                                                            er
  586 0000018C 68CA            LDR              R2,[R1,#BUF_PAST] ;load R2 with
                                                             first byte past bu
                                                            ffer
  587 0000018E 4290            CMP              R0,R2       ;check if R0 is les
                                                            s than past buffer
  588 00000190 D300            BLO              clearCNQ
  589 00000192 6888            LDR              R0,[R1,#BUF_STRT] ;load R0 with
                                                             buffer start point
                                                            er
  590 00000194         
  591 00000194 6008    clearCNQ
                               STR              R0,[R1,#IN_PTR] ;store new in p
                                                            ointer
  592 00000196 2220            MOVS             R2,#0x20    ;load R2 with mask 
                                                            to clear C flag
  593 00000198 0612            LSLS             R2,R2,#24   ;shift mask 24 bits
                                                             left
  594 0000019A F3EF 8300       MRS              R3,APSR     ;load APSR into R3
  595 0000019E 4393            BICS             R3,R3,R2    ;clear using mask
  596 000001A0 F383 8800       MSR              APSR,R3     ;store R3 in APSR
  597 000001A4 E006            B                endNQ
  598 000001A6         
  599 000001A6 2220    fullNQ  MOVS             R2,#0x20    ;load R2 with mask 
                                                            to set C flag
  600 000001A8 0612            LSLS             R2,R2,#24   ;shift mask 24 bits
                                                             left
  601 000001AA F3EF 8300       MRS              R3,APSR     ;load APSR into R3
  602 000001AE 4313            ORRS             R3,R3,R2    ;set using mask
  603 000001B0 F383 8800       MSR              APSR,R3     ;store R3 in APSR
  604 000001B4         
  605 000001B4 BD0C    endNQ   POP              {R2-R3,PC}
  606 000001B6                 ENDP
  607 000001B6         ;-----------------------------end subroutine------------
                       -----------------------
  608 000001B6         
  609 000001B6         ;-------------------------------------------------------
                       -----------------------  
  610 000001B6         ;PutChar
  611 000001B6         ;FUNCTION: displays a single character to the terminal f
                       rom R0
  612 000001B6         ;INPUTS: R0 - character
  613 000001B6         ;OUTPUTS: none
  614 000001B6         ;CHANGED: none
  615 000001B6         ;SUBROUTINES USED: Enqueue
  616 000001B6         ;-------------------------------------------------------
                       -----------------------
  617 000001B6         
  618 000001B6         PutChar PROC             {R0-R14}
  619 000001B6 B507            PUSH             {R0-R2,LR}
  620 000001B8         
  621 000001B8 4947            LDR              R1,=TxQRef  ;try to enqueue cha
                                                            racter
  622 000001BA B672    putLoop CPSID            I           ;mask interrupts



ARM Macro Assembler    Page 16 Program Title for Listing Header Goes Here


  623 000001BC F7FF FFFE       BL               Enqueue
  624 000001C0 B662            CPSIE            I           ;unmask interrupts
  625 000001C2 D2FA            BCS              putLoop     ;loop if unsuccesfu
                                                            l
  626 000001C4 4851            LDR              R0,=UART0_BASE 
                                                            ;enable TxInterrupt
                                                            
  627 000001C6 21AC            MOVS             R1,#UART0_C2_TI_RI
  628 000001C8 70C1            STRB             R1,[R0,#UART_C2_OFFSET]
  629 000001CA         
  630 000001CA BD07            POP              {R0-R2,PC}
  631 000001CC                 ENDP
  632 000001CC         ;-----------------------------end subroutine------------
                       -----------------------
  633 000001CC         
  634 000001CC         ;-------------------------------------------------------
                       -----------------------  
  635 000001CC         ;PutNumHex
  636 000001CC         ;FUNCTION: prints the hex representation of the unsigned
                        word value in R0
  637 000001CC         ;INPUTS: R0 - unsigned word value
  638 000001CC         ;OUTPUTS: none
  639 000001CC         ;CHANGED: none
  640 000001CC         ;-------------------------------------------------------
                       -----------------------
  641 000001CC         PutNumHex
                               PROC             {R0-R14}
  642 000001CC B506            PUSH             {R1-R2,LR}
  643 000001CE         
  644 000001CE 2108            MOVS             R1,#8       ;initialize downcou
                                                            nter to 8
  645 000001D0 4A58            LDR              R2,=0xF0000000 ;initialize mask
                                                            
  646 000001D2         
  647 000001D2 2900    hexLoop CMP              R1,#0       ;check if downcount
                                                            er is 0
  648 000001D4 D00D            BEQ              putHEnd
  649 000001D6 B401            PUSH             {R0}
  650 000001D8 4010            ANDS             R0,R0,R2    ;AND hex value with
                                                             mask to get LSB
  651 000001DA 0F00            LSRS             R0,#28      ;shift value to LSB
                                                            
  652 000001DC 280A            CMP              R0,#10      ;check if number is
                                                             numeric or alphabe
                                                            tic
  653 000001DE D201            BHS              hexLetter
  654 000001E0 3030            ADDS             R0,#48      ;add 48 to convert 
                                                            to appropriate numb
                                                            er
  655 000001E2 E000            B                printHex
  656 000001E4         
  657 000001E4 3037    hexLetter
                               ADDS             R0,#55      ;add 55 to convert 
                                                            to appropriate lett
                                                            er
  658 000001E6         
  659 000001E6 F7FF FFFE 
                       printHex
                               BL               PutChar     ;print hex characte



ARM Macro Assembler    Page 17 Program Title for Listing Header Goes Here


                                                            r
  660 000001EA 1E49            SUBS             R1,R1,#1    ;decrement downcoun
                                                            ter
  661 000001EC BC01            POP              {R0}
  662 000001EE 0100            LSLS             R0,#NIB_SHFT ;shift to next nib
                                                            ble
  663 000001F0 E7EF            B                hexLoop
  664 000001F2         
  665 000001F2 BD06    putHEnd POP              {R1-R2,PC}
  666 000001F4                 ENDP
  667 000001F4         ;-----------------------------end subroutine------------
                       -----------------------
  668 000001F4         
  669 000001F4         ;-------------------------------------------------------
                       -----------------------  
  670 000001F4         ;PutNumUB
  671 000001F4         ;FUNCTION: prints the decimal representation of the unsi
                       gned byte value in R0
  672 000001F4         ;INPUTS: R0 - unsinged byte value
  673 000001F4         ;OUTPUTS: none
  674 000001F4         ;CHANGED: none
  675 000001F4         ;-------------------------------------------------------
                       -----------------------
  676 000001F4         PutNumUB
                               PROC             {R0-R14}
  677 000001F4 B503            PUSH             {R0-R1,LR}
  678 000001F6         
  679 000001F6 210F            MOVS             R1,#0x0F    ;load R1 with mask
  680 000001F8 4008            ANDS             R0,R0,R1    ;AND R0 with mask t
                                                            o get LSB
  681 000001FA F7FF FFFE       BL               PutNumU     ;print the decimal 
                                                            value in R0
  682 000001FE         
  683 000001FE BD03            POP              {R0-R1,PC}
  684 00000200                 ENDP
  685 00000200         ;-----------------------------end subroutine------------
                       -----------------------
  686 00000200         
  687 00000200         ;-------------------------------------------------------
                       -----------------------  
  688 00000200         ;PutNumU
  689 00000200         ;FUNCTION: displays an unsigned decimal number to the te
                       rminal from R0
  690 00000200         ;INPUTS: R0 - value to print
  691 00000200         ;OUTPUTS: none
  692 00000200         ;CHANGED: none
  693 00000200         ;-------------------------------------------------------
                       -----------------------
  694 00000200         ;R0: value to print
  695 00000200         ;R1: radix
  696 00000200         ;R2: temporary storage
  697 00000200         ;R3: counter/offset
  698 00000200         
  699 00000200         PutNumU PROC             {R0-R14}
  700 00000200 B50F            PUSH             {R0-R3,LR}  ;Push registers 0-2
                                                            
  701 00000202 2300            MOVS             R3,#0
  702 00000204         
  703 00000204 0001    divLoop MOVS             R1,R0       ;Move quotient into



ARM Macro Assembler    Page 18 Program Title for Listing Header Goes Here


                                                             R1
  704 00000206 200A            MOVS             R0,#10      ;Move radix (10) in
                                                            to R1
  705 00000208 F7FF FFFE       BL               divu        ;Call divu
  706 0000020C         
  707 0000020C B402            PUSH             {R1}
  708 0000020E         
  709 0000020E 1C5B            ADDS             R3,R3,#1
  710 00000210 2800            CMP              R0,#0       ;if(quotient == 0)
  711 00000212 D1F7            BNE              divLoop     ;Branch back
  712 00000214         
  713 00000214 2B00    printVal
                               CMP              R3,#0
  714 00000216 D005            BEQ              endPutNum
  715 00000218 BC01            POP              {R0}
  716 0000021A 3030            ADDS             R0,R0,#0x30 ;Add 30 to remainde
                                                            r to match ascii va
                                                            lue 
  717 0000021C         ;for that number
  718 0000021C F7FF FFFE       BL               PutChar
  719 00000220 1E5B            SUBS             R3,R3,#1
  720 00000222 E7F7            B                printVal
  721 00000224         
  722 00000224 BD0F    endPutNum
                               POP              {R0-R3,PC}
  723 00000226                 ENDP
  724 00000226         ;-----------------------------end subroutine------------
                       -----------------------
  725 00000226         
  726 00000226         ;-------------------------------------------------------
                       --------
  727 00000226         ;divu
  728 00000226         ;FUNCTION: Divides two numbers and returns the quotient 
                       and remainder
  729 00000226         ;INPUTS: R0 - divisor; R1 - dividend
  730 00000226         ;OUTPUTS: R0 - quotient; R1 - remainder
  731 00000226         ;MODIFIED: R0, R1
  732 00000226         ;-------------------------------------------------------
                       --------
  733 00000226         divu    PROC             {R0-R14}
  734 00000226 B41C            PUSH             {R2-R4}
  735 00000228 2200            MOVS             R2,#0       ;Reset R2 to 0
  736 0000022A F3EF 8300       MRS              R3,APSR     ;set C flag {
  737 0000022E 2420            MOVS             R4,#0x20
  738 00000230 060C            LSLS             R4,R1,#24
  739 00000232 4323            ORRS             R3,R3,R4
  740 00000234 F383 8800       MSR              APSR,R3     ;}
  741 00000238 2800            CMP              R0,#0       ;if(divisor == 0)
  742 0000023A D008            BEQ              div_by_0
  743 0000023C         
  744 0000023C 4281    while   CMP              R1,R0       ;while(dividend >= 
                                                            divisor) {
  745 0000023E D302            BLO              good_div
  746 00000240 1A09            SUBS             R1,R1,R0    ;dividend -= diviso
                                                            r
  747 00000242 3201            ADDS             R2,#1       ;quotient ++
  748 00000244 E7FA            B                while
  749 00000246         
  750 00000246 0010    good_div



ARM Macro Assembler    Page 19 Program Title for Listing Header Goes Here


                               MOVS             R0,R2
  751 00000248 43A3            BICS             R3,R3,R4    ;Clears C flag
  752 0000024A F383 8800       MSR              APSR,R3     ;}
  753 0000024E         
  754 0000024E BC1C    div_by_0
                               POP              {R2-R4}
  755 00000250 4770            BX               LR
  756 00000252                 ENDP
  757 00000252         ;-----------------------------end subroutine------------
                       -----------------------
  758 00000252         
  759 00000252         ;-------------------------------------------------------
                       -----------------------  
  760 00000252         ;PutStringSB
  761 00000252         ;FUNCTION: displays a string stored in memory to the ter
                       minal screen
  762 00000252         ;INPUTS: R0 - string address to read from; R1 - buffer c
                       apacity
  763 00000252         ;OUTPUTS: none
  764 00000252         ;CHANGED: none
  765 00000252         ;-------------------------------------------------------
                       -----------------------
  766 00000252         ;R0: current character
  767 00000252         ;R1: buffer capacity
  768 00000252         ;R2: string base address
  769 00000252         ;R3: counter/offset
  770 00000252         
  771 00000252         PutStringSB
                               PROC             {R0-R14}
  772 00000252 B50F            PUSH             {R0-R3,LR}
  773 00000254 0002            MOVS             R2,R0       ;Moves address into
                                                             R2
  774 00000256 2300            MOVS             R3,#0       ;Initializes counte
                                                            r to 0
  775 00000258         
  776 00000258 428B    PSLoop  CMP              R3,R1       ;if(counter >= buff
                                                            er capacity)
  777 0000025A D206            BHS              PSEnd
  778 0000025C         
  779 0000025C 5CD0            LDRB             R0,[R2,R3]  ;Get character at s
                                                            tring R2, offset R3
                                                            
  780 0000025E 2800            CMP              R0,#0
  781 00000260 D003            BEQ              PSEnd
  782 00000262         
  783 00000262 F7FF FFFE       BL               PutChar     ;Display character 
                                                            to terminal screen
  784 00000266 1C5B            ADDS             R3,R3,#1    ;Inrement counter b
                                                            y 1
  785 00000268 E7F6            B                PSLoop
  786 0000026A         
  787 0000026A BD0F    PSEnd   POP              {R0-R3,PC}
  788 0000026C                 ENDP
  789 0000026C         ;-----------------------------end subroutine------------
                       -----------------------
  790 0000026C         
  791 0000026C         ;-------------------------------------------------------
                       -----------------------  
  792 0000026C         ;Init_PIT_IRQ



ARM Macro Assembler    Page 20 Program Title for Listing Header Goes Here


  793 0000026C         ;FUNCTION: initializes the NVIC for PIT use
  794 0000026C         ;INPUTS: none
  795 0000026C         ;OUTPUTS: none
  796 0000026C         ;CHANGED: none
  797 0000026C         ;-------------------------------------------------------
                       -----------------------
  798 0000026C         Init_PIT_IRQ
                               PROC             {R0-R14}
  799 0000026C B507            PUSH             {R0-R2,LR}
  800 0000026E         
  801 0000026E 4832            LDR              R0,=SIM_SCGC6 ;set SIM_SCGC6 fo
                                                            r PIT clock enabled
                                                            
  802 00000270 4932            LDR              R1,=SIM_SCGC6_PIT_MASK
  803 00000272 6802            LDR              R2,[R0,#0]
  804 00000274 430A            ORRS             R2,R2,R1
  805 00000276 6002            STR              R2,[R0,#0]
  806 00000278         
  807 00000278 4831            LDR              R0,=PIT_CH0_BASE 
                                                            ;disable PIT0 timer
                                                            
  808 0000027A 4932            LDR              R1,=PIT_TCTRL_TEN_MASK
  809 0000027C 7A02            LDRB             R2,[R0,#PIT_TCTRL_OFFSET]
  810 0000027E 4391            BICS             R1,R1,R2
  811 00000280 6081            STR              R1,[R0,#PIT_TCTRL_OFFSET]
  812 00000282         
  813 00000282 4831            LDR              R0,=PIT_IPR ;set PIT interrupt 
                                                            priority
  814 00000284 4931            LDR              R1,=NVIC_IPR_PIT_MASK
  815 00000286 6802            LDR              R2,[R0,#0]
  816 00000288 438A            BICS             R2,R2,R1
  817 0000028A 6002            STR              R2,[R0,#0]
  818 0000028C         
  819 0000028C 4822            LDR              R0,=NVIC_ICPR ;clear any pendin
                                                            g PIT interrupts
  820 0000028E 4930            LDR              R1,=NVIC_ICPR_PIT_MASK
  821 00000290 6001            STR              R1,[R0,#0]
  822 00000292         
  823 00000292 4823            LDR              R0,=NVIC_ISER ;unmask PIT inter
                                                            rutps
  824 00000294 492E            LDR              R1,=NVIC_ISER_PIT_MASK
  825 00000296 6001            STR              R1,[R0,#0]
  826 00000298         
  827 00000298 482E            LDR              R0,=PIT_BASE ;enable PIT interr
                                                            upts
  828 0000029A 492A            LDR              R1,=PIT_MCR_EN_FRZ
  829 0000029C 7001            STRB             R1,[R0,#PIT_MCR_OFFSET]
  830 0000029E         
  831 0000029E 4828            LDR              R0,=PIT_CH0_BASE ;set interrupt
                                                             period
  832 000002A0 492D            LDR              R1,=PIT_LDVAL_10ms
  833 000002A2 6001            STR              R1,[R0,#PIT_LDVAL_OFFSET]
  834 000002A4         
  835 000002A4 4826            LDR              R0,=PIT_CH0_BASE ;enable timer 
                                                            channel 0 for inter
                                                            rupts
  836 000002A6 2103            MOVS             R1,#PIT_TCTRL_CH_IE
  837 000002A8 7201            STRB             R1,[R0,#PIT_TCTRL_OFFSET]
  838 000002AA         



ARM Macro Assembler    Page 21 Program Title for Listing Header Goes Here


  839 000002AA BD07            POP              {R0-R2,PC}
  840 000002AC                 ENDP
  841 000002AC         ;-----------------------------end subroutine------------
                       -----------------------
  842 000002AC         
  843 000002AC         ;-------------------------------------------------------
                       -----------------------  
  844 000002AC         ;PIT_ISR
  845 000002AC         ;FUNCTION: handles pit triggers by incrementing a counte
                       r
  846 000002AC         ;INPUTS: none
  847 000002AC         ;OUTPUTS: none
  848 000002AC         ;CHANGED: none
  849 000002AC         ;SUBROUTINES USED: none
  850 000002AC         ;-------------------------------------------------------
                       -----------------------
  851 000002AC         PIT_IRQHandler
  852 000002AC         PIT_ISR PROC             {R0-R14}
  853 000002AC B672            CPSID            I
  854 000002AE B500            PUSH             {LR}
  855 000002B0         
  856 000002B0 481C            LDR              R0,=RunStopWatch ;get RunStopWa
                                                            tch variable
  857 000002B2 7800            LDRB             R0,[R0,#0]
  858 000002B4 2800            CMP              R0,#0       ;exit if equals 0
  859 000002B6 D003            BEQ              pit_isr_end
  860 000002B8 481B            LDR              R0,=Count   ;get count variable
                                                            
  861 000002BA 6801            LDR              R1,[R0,#0]
  862 000002BC 1C49            ADDS             R1,R1,#1    ;increment count
  863 000002BE 6001            STR              R1,[R0,#0]  ;store new count
  864 000002C0         
  865 000002C0 481F    pit_isr_end
                               LDR              R0,=PIT_CH0_BASE ;get pit flag 
                                                            register
  866 000002C2 2101            MOVS             R1,#PIT_TFLG_TIF_MASK 
                                                            ;get pit flag mask
  867 000002C4 7301            STRB             R1,[R0,#PIT_TFLG_OFFSET] ;store
                                                             new tflg register
  868 000002C6         
  869 000002C6 BD00            POP              {PC}
  870 000002C8 B662            CPSIE            I
  871 000002CA                 ENDP
  872 000002CA         ;-----------------------------end ISR-------------------
                       -----------------------
  873 000002CA         
  874 000002CA         ;>>>>>   end subroutine code <<<<<
  875 000002CA 00 00           ALIGN
  876 000002CC         ;*******************************************************
                       ***************
  877 000002CC         ;Constants
  878 000002CC 00000000 
              00000000 
              00000000 
              00000000 
              40048004 
              0C000000 
              04010000 
              40048010 



ARM Macro Assembler    Page 22 Program Title for Listing Header Goes Here


              00010007 
              40048034 
              00000400 
              40048038 
              00000200 
              40049004 
              01000200 
              40049008 
              4006A000 
              E000E40C 
              000000C0 
              E000E280 
              00001000 
              E000E100 
              00000000 
              00000000 
              00000000 
              00000000 
              F0000000 
              4004803C 
              00800000 
              40037100 
              00000001 
              E000E414 
              00C00000 
              00400000 
              40037000 
              0003A97F 
              00000000 
              00000000         AREA             MyConst,DATA,READONLY
  879 00000000         ;>>>>> begin constants here <<<<<
  880 00000000         ;>>>>>   end constants here <<<<<
  881 00000000         ;*******************************************************
                       ***************
  882 00000000         ;Variables
  883 00000000                 AREA             MyData,DATA,READWRITE
  884 00000000                 EXPORT           Count
  885 00000000                 EXPORT           RunStopWatch
  886 00000000         ;>>>>> begin variables here <<<<<
  887 00000000 00 00 00 
              00       Count   SPACE            4
  888 00000004 00      RunStopWatch
                               SPACE            1
  889 00000005 00 00 00        ALIGN
  890 00000008 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 RxQRef  SPACE            18
  891 0000001A 00 00           ALIGN
  892 0000001C 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 TxQRef  SPACE            18
  893 0000002E 00 00           ALIGN
  894 00000030 00 00 00 



ARM Macro Assembler    Page 23 Program Title for Listing Header Goes Here


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    RxQBuffer
                               SPACE            TXRX_BUF_SIZE
  895 00000080                 ALIGN
  896 00000080 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    TxQBuffer
                               SPACE            TXRX_BUF_SIZE
  897 000000D0         ;>>>>>   end variables here <<<<<
  898 000000D0                 END
Command Line: --debug --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=interwork --



ARM Macro Assembler    Page 24 Program Title for Listing Header Goes Here


depend=.\objects\c_start.d -o.\objects\c_start.o -I.\RTE\_Target_1 -IC:\Keil_v5
\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx
_DFP\1.13.0\Device\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_V
ERSION SETA 524" --predefine="_RTE_ SETA 1" --predefine="MKL46Z256xxx4 SETA 1" 
--list=.\listings\c_start.lst C_Start.s
